// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Skema_WebAPI.Contexts;

#nullable disable

namespace Skema_WebAPI.Migrations
{
    [DbContext(typeof(SkemaDbContext))]
    [Migration("20250131114759_ModelUpdatedAgain")]
    partial class ModelUpdatedAgain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Skema_WebAPI.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.Day", b =>
                {
                    b.Property<int>("DayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DayId"));

                    b.Property<DateTime>("Dato")
                        .HasColumnType("datetime2");

                    b.Property<int>("FagFaglige_Timer")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Samlet_Timer")
                        .HasColumnType("int");

                    b.Property<int>("TP_Timer")
                        .HasColumnType("int");

                    b.HasKey("DayId");

                    b.ToTable("Day");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.DaySubject", b =>
                {
                    b.Property<int>("DaySubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DaySubjectId"));

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("DaySubjectId");

                    b.HasIndex("DayId");

                    b.HasIndex("SubjectId");

                    b.ToTable("DaySubjects");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.DayTeacher", b =>
                {
                    b.Property<int>("DayTeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DayTeacherId"));

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("DayTeacherId");

                    b.HasIndex("DayId");

                    b.HasIndex("TeacherId");

                    b.ToTable("DayTeachers");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<bool>("ErTP")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SamletTimer")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.TeacherCourse", b =>
                {
                    b.Property<int>("TeacherCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherCourseId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("TeacherCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherCourse");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.DaySubject", b =>
                {
                    b.HasOne("Skema_WebAPI.Models.Day", "Day")
                        .WithMany("DaySubjects")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skema_WebAPI.Models.Subject", "Subject")
                        .WithMany("DaySubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.DayTeacher", b =>
                {
                    b.HasOne("Skema_WebAPI.Models.Day", "Day")
                        .WithMany("DayTeachers")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skema_WebAPI.Models.Teacher", "Teacher")
                        .WithMany("DayTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.Subject", b =>
                {
                    b.HasOne("Skema_WebAPI.Models.Teacher", "Teacher")
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.TeacherCourse", b =>
                {
                    b.HasOne("Skema_WebAPI.Models.Course", "Course")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skema_WebAPI.Models.Teacher", "Teacher")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.Course", b =>
                {
                    b.Navigation("TeacherCourses");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.Day", b =>
                {
                    b.Navigation("DaySubjects");

                    b.Navigation("DayTeachers");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.Subject", b =>
                {
                    b.Navigation("DaySubjects");
                });

            modelBuilder.Entity("Skema_WebAPI.Models.Teacher", b =>
                {
                    b.Navigation("DayTeachers");

                    b.Navigation("Subjects");

                    b.Navigation("TeacherCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
